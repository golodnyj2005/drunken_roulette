document.addEventListener('DOMContentLoaded', () => {
  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
  const wheel = document.getElementById('wheel');
  const spinBtn = document.getElementById('spin-btn');
  const buttonText = spinBtn.querySelector('.button-text');
  const buttonLoader = spinBtn.querySelector('.button-loader');
  const wheelContainer = document.querySelector('.roulette-wheel-container');
  const numberInput = document.getElementById('number-input');
  const numberDecrease = document.getElementById('number-decrease');
  const numberIncrease = document.getElementById('number-increase');
  const numberOptions = document.querySelectorAll('.number-option');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  if (!wheel || !spinBtn || !numberInput) {
    console.error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    return;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const setContainerSize = () => {
    const size = Math.min(window.innerWidth, window.innerHeight) * 0.8;
    wheelContainer.style.width = `${Math.min(size, 320)}px`;
    wheelContainer.style.height = `${Math.min(size, 320)}px`;
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
  setContainerSize();
  window.addEventListener('resize', setContainerSize);

  // –°–æ–∑–¥–∞–Ω–∏–µ SVG —ç–ª–µ–º–µ–Ω—Ç–∞
  const createSVGElement = (tag, attributes) => {
    const element = document.createElementNS('http://www.w3.org/2000/svg', tag);
    for (const [key, value] of Object.entries(attributes)) {
      element.setAttribute(key, value);
    }
    return element;
  };

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–ª–µ—Å–∞
  const centerX = 160;
  const centerY = 160;
  const radius = 150;
  const sectorNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–µ—Å–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ–∫—Ç–æ—Ä–æ–≤
  while (wheel.firstChild) {
    wheel.removeChild(wheel.firstChild);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
  sectorNumbers.forEach((number, i) => {
    const startAngle = (i * 30 - 90) * (Math.PI / 180);
    const endAngle = ((i + 1) * 30 - 90) * (Math.PI / 180);

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ —Å–µ–∫—Ç–æ—Ä–∞
    const path = createSVGElement('path', {
      d: `
        M ${centerX},${centerY}
        L ${centerX + radius * Math.cos(startAngle)},${centerY + radius * Math.sin(startAngle)}
        A ${radius},${radius} 0 0,1 ${centerX + radius * Math.cos(endAngle)},${centerY + radius * Math.sin(endAngle)}
        Z
      `,
      fill: i % 2 === 0 ? '#960018' : '#080808',
      stroke: '#FFD700',
      'stroke-width': '2',
      'aria-hidden': 'true'
    });

    // –¢–µ–∫—Å—Ç –≤ —Å–µ–∫—Ç–æ—Ä–µ
    const textAngle = (i * 30 - 90 + 15) * (Math.PI / 180);
    const text = createSVGElement('text', {
      x: centerX + radius * 0.7 * Math.cos(textAngle),
      y: centerY + radius * 0.7 * Math.sin(textAngle),
      'text-anchor': 'middle',
      'alignment-baseline': 'middle',
      fill: '#fff',
      'font-size': '14px',
      'font-weight': 'bold',
      'aria-hidden': 'true',
      'data-sector-number': number
    });
    text.textContent = number;

    wheel.appendChild(path);
    wheel.appendChild(text);
  });

  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥
  const centerCircle = createSVGElement('circle', {
    cx: centerX,
    cy: centerY,
    r: radius * 0.2,
    fill: 'rgba(0, 0, 0, 0.8)',
    stroke: 'rgba(255, 255, 255, 0.2)',
    'stroke-width': '3',
    'aria-hidden': 'true'
  });
  wheel.appendChild(centerCircle);

  // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∑–≤–µ–∑–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ
  const star = createSVGElement('text', {
    x: centerX,
    y: centerY + 5,
    'text-anchor': 'middle',
    'font-size': '24px',
    'font-weight': 'bold',
    fill: '#fff',
    'text-shadow': '0 0 10px rgba(255, 255, 255, 0.7)',
    'aria-hidden': 'true'
  });
  star.textContent = 'üåü';
  wheel.appendChild(star);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥ —Å—Ç—Ä–µ–ª–∫–æ–π
  const getCurrentSector = () => {
    const wheelStyle = window.getComputedStyle(wheel);
    const matrix = new DOMMatrix(wheelStyle.transform);
    const angle = (Math.atan2(matrix.b, matrix.a) * (180 / Math.PI)) % 360;
    const normalizedAngle = angle < 0 ? angle + 360 : angle;
    
    const sectorIndex = Math.floor(normalizedAngle / 30);
    const correctedIndex = (12 - sectorIndex - 1) % 12;
    
    const texts = wheel.querySelectorAll('text');
    const sectorText = texts[correctedIndex].textContent;
    
    return sectorText;
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  const updateNumberSelection = () => {
    numberOptions.forEach(option => {
      option.classList.toggle(
        'selected', 
        parseInt(option.dataset.number) === parseInt(numberInput.value)
      );
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ +/-
  numberDecrease.addEventListener('click', () => {
    let value = parseInt(numberInput.value) - 1;
    if (value < 1) value = 12;
    numberInput.value = value;
    updateNumberSelection();
  });

  numberIncrease.addEventListener('click', () => {
    let value = parseInt(numberInput.value) + 1;
    if (value > 12) value = 1;
    numberInput.value = value;
    updateNumberSelection();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å–µ—Ç–∫–∏
  numberOptions.forEach(option => {
    option.addEventListener('click', () => {
      // –í–∏–±—Ä–∞—Ü–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
      if ('vibrate' in navigator) {
        navigator.vibrate(50);
      }
      
      numberInput.value = option.dataset.number;
      updateNumberSelection();
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
      option.classList.add('selected-pulse');
      setTimeout(() => {
        option.classList.remove('selected-pulse');
      }, 300);
    });
  });

  // –í—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞
  const spinWheel = (e) => {
    if (e) e.preventDefault();
    if (spinBtn.disabled) return;
    
    const selectedNumber = parseInt(numberInput.value);
    if (isNaN(selectedNumber)) {
      showResult(null, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 12");
      return;
    }
    
    if (selectedNumber < 1 || selectedNumber > 12) {
      showResult(null, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 12");
      return;
    }
    
    spinBtn.disabled = true;
    numberInput.disabled = true;
    numberDecrease.disabled = true;
    numberIncrease.disabled = true;
    buttonText.textContent = '–í—Ä–∞—â–∞–µ—Ç—Å—è...';
    buttonLoader.style.display = 'block';
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    wheel.style.transition = 'none';
    wheel.style.transform = 'rotate(0deg)';
    void wheel.offsetWidth;

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —É–≥–æ–ª
    const fullRotations = Math.floor(Math.random() * 5) + 5;
    const winningIndex = Math.floor(Math.random() * 12);
    const sectorAngle = 30;
    const spinAngle = fullRotations * 360 + (360 - (winningIndex * sectorAngle + sectorAngle/2));
    
    wheel.style.transition = 'transform 4s cubic-bezier(0.2, 0.8, 0.3, 1)';
    wheel.style.transform = `rotate(-${spinAngle}deg)`;

    setTimeout(() => {
      const sectorNumber = getCurrentSector();
      spinBtn.disabled = false;
      numberInput.disabled = false;
      numberDecrease.disabled = false;
      numberIncrease.disabled = false;
      buttonText.textContent = '–ö—Ä—É—Ç–∏—Ç—å';
      buttonLoader.style.display = 'none';
      
      if (parseInt(sectorNumber) === selectedNumber) {
        showResult(sectorNumber, `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–ø–∞–ª –Ω–æ–º–µ—Ä ${sectorNumber}`);
      } else {
        showResult(sectorNumber, `–í—ã–ø–∞–ª –Ω–æ–º–µ—Ä ${sectorNumber}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`);
      }
    }, 4000);
  };

  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const showResult = (sectorNumber, message) => {
    const resultElement = document.createElement('div');
    resultElement.className = 'result-notification';
    
    if (sectorNumber) {
      const selectedNumber = parseInt(numberInput.value);
      if (parseInt(sectorNumber) === selectedNumber) {
        resultElement.classList.add('win-message');
      } else {
        resultElement.classList.add('lose-message');
      }
    }
    
    resultElement.textContent = message;
    resultElement.setAttribute('role', 'alert');
    
    document.body.appendChild(resultElement);
    
    setTimeout(() => {
      resultElement.classList.add('show');
    }, 10);
    
    setTimeout(() => {
      resultElement.classList.remove('show');
      setTimeout(() => {
        if (resultElement.parentNode) {
          document.body.removeChild(resultElement);
        }
      }, 300);
    }, 3000);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è
  spinBtn.addEventListener('click', spinWheel);
  spinBtn.addEventListener('touchend', spinWheel);
  
  spinBtn.addEventListener('touchstart', (e) => {
    e.preventDefault();
    spinBtn.classList.add('touched');
  });
  
  spinBtn.addEventListener('touchend', (e) => {
    e.preventDefault();
    spinBtn.classList.remove('touched');
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  updateNumberSelection();
});
